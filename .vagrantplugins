class Command < Vagrant.plugin("2", :command)
  def execute
    # Execute the actual SSH
    with_target_vms(nil, single_target: true) do |vm|
      cmd = command + " " + @argv.join(" ")
      ssh_opts = {extra_args: ['-q']}

      @logger.debug("Executing single command on remote machine: #{cmd}")
      env = vm.action(:ssh_run, ssh_opts: ssh_opts, ssh_run_command: cmd)

      # Exit with the exit status of the command or a 0 if we didn't
      # get one.
      exit_status = env[:ssh_run_exit_status] || 0
      return exit_status
    end
  end
end


class CeleryWorkerCommand < Command
  def self.synopsis
    'starts Celery worker instance'
  end

  def command
    'cd /vagrant; celery -A proj worker -l info'
  end
end


class CeleryMultiStartCommand < Command
  def self.synopsis
    'starts single Celery worker with explicit name in the background'
  end

  def command
    'cd /vagrant; celery multi start w1 -A proj -l info'
  end
end


class CeleryMultiRestartCommand < Command
  def self.synopsis
    'restarts the same single Celery worker'
  end

  def command
    'cd /vagrant; celery multi restart w1 -A proj -l info'
  end
end


class CeleryMultiStopCommand < Command
  def self.synopsis
    "stops single Celery worker asynchronously, it doesn't wait for the worker to shutdown"
  end

  def command
    'cd /vagrant; celery multi stop w1 -A proj -l info'
  end
end


class CeleryMultiStopwaitCommand < Command
  def self.synopsis
    'stops single Celery worker synchronously, this ensures all currently executing tasks is completed before exiting'
  end

  def command
    'cd /vagrant; celery multi stopwait w1 -A proj -l info'
  end
end


class Plugin < Vagrant.plugin("2")
  name "Additional Vagrant commands"

  command("celery-worker") do
    CeleryWorkerCommand
  end

  command("celery-multi-start") do
    CeleryMultiStartCommand
  end

  command("celery-multi-restart") do
    CeleryMultiRestartCommand
  end

  command("celery-multi-stop") do
    CeleryMultiStopCommand
  end

  command("celery-multi-stopwait") do
    CeleryMultiStopwaitCommand
  end
end
